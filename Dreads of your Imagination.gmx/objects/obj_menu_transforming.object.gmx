<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fire_enemy_transform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = 0;
rot = 0;
item = 0;

menu_x = view_xview[0]+view_wview[0]/2 ;
menu_y = view_yview[0]+view_hview[0]/2 ;

menu_width = 500;
menu_height = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_pet.state == states.transforming &amp;&amp; instance_exists(obj_pet.enemy) &amp;&amp; obj_pet.enemy.sprite_index = spr_spider){
    if (keyboard_check_pressed(ord("D"))){
        selected += 1;
    }else if (keyboard_check_pressed(ord("A"))){
        selected -= 1;
    }
    
    rot -= scr_angle_difference(rot, selected * (360/image_number))/(0.2*room_speed);
    
    item = -selected mod image_number;
    
    if(item &lt; 0){
        item += image_number;
    }
    
    if(keyboard_check(vk_enter) || keyboard_check(ord("E")) || gamepad_button_check_pressed(0,gp_face2) &amp;&amp; obj_pet.state = states.transforming){
        switch(item){
            case 0: with(obj_pet.enemy) instance_change(obj_web_pickup,1);
                    keyboard_clear(ord("E"));
                    obj_pet.state = states.petcontroll;
                    obj_player.state = states.petcontroll;
                    break;
            case 1: with(obj_pet.enemy) instance_change(obj_bow,1);
                    keyboard_clear(ord("E"));
                    obj_pet.state = states.petcontroll;
                    obj_player.state = states.petcontroll;
                    break;
        }
    }
}

if(obj_pet.state == states.transforming &amp;&amp; instance_exists(obj_pet.enemy) &amp;&amp; obj_pet.enemy.sprite_index = spr_fire_enemy){
    if (keyboard_check_pressed(ord("D"))){
        selected += 1;
    }else if (keyboard_check_pressed(ord("A"))){
        selected -= 1;
    }
    
    rot -= scr_angle_difference(rot, selected * (360/image_number))/(0.2*room_speed);
    
    item = -selected mod image_number;
    
    if(item &lt; 0){
        item += image_number;
    }
    
    if(keyboard_check(vk_enter) || keyboard_check(ord("E")) || gamepad_button_check_pressed(0,gp_face2) &amp;&amp; obj_pet.state = states.transforming){
        switch(item){
            case 0: with(obj_pet.enemy) instance_change(obj_lightball_pickup,1);
                    keyboard_clear(ord("E"));
                    obj_pet.state = states.petcontroll;
                    obj_player.state = states.petcontroll;
                    break;
        }
    }
}

if(obj_pet.state == states.transforming &amp;&amp; instance_exists(obj_pet.enemy) &amp;&amp; obj_pet.enemy.sprite_index = spr_alien2){
    if (keyboard_check_pressed(ord("D"))){
        selected += 1;
    }else if (keyboard_check_pressed(ord("A"))){
        selected -= 1;
    }
    
    rot -= scr_angle_difference(rot, selected * (360/image_number))/(0.2*room_speed);
    
    item = -selected mod image_number;
    
    if(item &lt; 0){
        item += image_number;
    }
    
    if(keyboard_check(vk_enter) || keyboard_check(ord("E")) || gamepad_button_check_pressed(0,gp_face2) &amp;&amp; obj_pet.state = states.transforming){
        switch(item){
            case 0: with(obj_pet.enemy) instance_change(obj_frog_jump,1);
                    keyboard_clear(ord("E"));
                    obj_pet.state = states.petcontroll;
                    obj_player.state = states.petcontroll;
                    break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 4;
image_speed = 0;

display_set_gui_size(1024, 768);

if(obj_pet.state == states.transforming &amp;&amp; obj_pet.enemy.sprite_index = spr_spider){
    sprite_index = spr_enemy;
    var pr, i;
    i = 0;
    pr = ds_priority_create();
    
    repeat(image_number){
        ds_priority_add(pr,i,lengthdir_y(1,(rot-90)+i*(360/image_number)));
        i+= 1;
    }
    
    repeat(image_number){
        i = ds_priority_delete_min(pr);
        draw_sprite_ext(sprite_index,
        i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)),
        menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
    }
    
    ds_priority_destroy(pr);
    
}

if(obj_pet.state == states.transforming &amp;&amp; obj_pet.enemy.sprite_index = spr_fire_enemy){
    sprite_index = spr_fire_enemy_transform;
    var pr, i;
    i = 0;
    pr = ds_priority_create();
    
    repeat(image_number){
        ds_priority_add(pr,i,lengthdir_y(1,(rot-90)+i*(360/image_number)));
        i+= 1;
    }
    
    repeat(image_number){
        i = ds_priority_delete_min(pr);
        draw_sprite_ext(sprite_index,
        i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)),
        menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
    }
    
    ds_priority_destroy(pr);
}

if(obj_pet.state == states.transforming &amp;&amp; obj_pet.enemy.sprite_index = spr_alien2){
    sprite_index = spr_frog;
    var pr, i;
    i = 0;
    pr = ds_priority_create();
    
    repeat(image_number){
        ds_priority_add(pr,i,lengthdir_y(1,(rot-90)+i*(360/image_number)));
        i+= 1;
    }
    
    repeat(image_number){
        i = ds_priority_delete_min(pr);
        draw_sprite_ext(sprite_index,
        i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)),
        menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
    }
    
    ds_priority_destroy(pr);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 4;
image_speed = 0;

display_set_gui_size(1024, 768);

if(obj_pet.state == states.transforming &amp;&amp; obj_pet.enemy.sprite_index = spr_spider){
    
    var text;
    
    switch(item){
        case 0: text = "Web: Use the power of the Spider and send webs to vertical moving enemies.#       If they get hit they will be stopped for 5 seconds! You can just use one Web each time." break;
        case 1: text = "Webow: A Bow made of Web. Use it like a grappling hook and reach different areas.#          Use the Mouse to choose where to place it!" break;
        default: text = "" break;
    }
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+view_wview[0]/2-449 , view_yview[0]+view_hview[0]/2 + 200,text);
    
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+view_wview[0]/2-450 , view_yview[0]+view_hview[0]/2 + 201,text);
    
    
    
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+view_wview[0]/2 + 1, view_yview[0]+view_hview[0]/2 - 127,"Press A or D to rotate.#E or Enter to choose.");
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]/2 - 128,"Press A or D to rotate.#E or Enter to choose.");

}

if(obj_pet.state == states.transforming &amp;&amp; obj_pet.enemy.sprite_index = spr_fire_enemy){
    
    var text;
    
    switch(item){
        case 0: text = "Lightball: Use the power of fire and send this Lightball.It will move the same direction you are facing,#             light the way and remove your fear while near it. You can just throw one fireball each#             time, and they last 30 seconds!" break;
        default: text = "" break;
    }
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+view_wview[0]/2-449 , view_yview[0]+view_hview[0]/2 + 200,text);
    
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+view_wview[0]/2-450 , view_yview[0]+view_hview[0]/2 + 201,text);
    
    
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+view_wview[0]/2 + 1, view_yview[0]+view_hview[0]/2 - 127,"Press A or D to rotate.#E or Enter to choose.");
    
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]/2 - 128,"Press A or D to rotate.#E or Enter to choose.");

}

if(obj_pet.state == states.transforming &amp;&amp; obj_pet.enemy.sprite_index = spr_alien2){
    
    var text;
    
    switch(item){
        case 0: text = "FrogLegs: Use the power of the Frog and jump higher." break;
        default: text = "" break;
    }
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+view_wview[0]/2-449 , view_yview[0]+view_hview[0]/2 + 200,text);
    
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+view_wview[0]/2-450 , view_yview[0]+view_hview[0]/2 + 201,text);
    
    
    
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+view_wview[0]/2 + 1, view_yview[0]+view_hview[0]/2 - 127,"Press A or D to rotate.#E or Enter to choose.");
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]/2 - 128,"Press A or D to rotate.#E or Enter to choose.");

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
