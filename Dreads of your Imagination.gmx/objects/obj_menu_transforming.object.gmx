<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = 0;
rot = 0;
item = 0;

menu_x = view_xview[0]+view_wview[0]/2 ;
menu_y = view_yview[0]+view_hview[0]/2 ;

menu_width = 500;
menu_height = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord("D"))){
    selected += 1;
}else if (keyboard_check_pressed(ord("A"))){
    selected -= 1;
}

rot -= scr_angle_difference(rot, selected * (360/image_number))/(0.2*room_speed);

item = -selected mod image_number;

if(item &lt; 0){
    item += image_number;
}

if(keyboard_check(vk_enter) || keyboard_check_pressed(ord("E")) &amp;&amp; obj_player.state = states.transforming){
    switch(item){
        case 0: obj_player.target.sprite_index = spr_spider;
                keyboard_clear(ord("E"));
                transform = true;
                obj_player.state = states.normal;
                break;
        case 1: obj_player.target.sprite_index = spr_bow;
                keyboard_clear(ord("E"));
                transform = true;
                obj_player.state = states.normal;
                break;
        case 2: obj_player.target.sprite_index = spr_crate;
                keyboard_clear(ord("E"));
                transform = true;
                obj_player.state = states.normal;
                break;
        case 3: obj_player.target.sprite_index = spr_sword;
                keyboard_clear(ord("E"));
                transform = true;
                obj_player.state = states.normal;
                break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 4;
image_speed = 0;

display_set_gui_size(1024, 768);

if(obj_player.state == states.transforming){
    var pr, i;
    i = 0;
    pr = ds_priority_create();
    
    repeat(image_number){
        ds_priority_add(pr,i,lengthdir_y(1,(rot-90)+i*(360/image_number)));
        i+= 1;
    }
    
    repeat(image_number){
        i = ds_priority_delete_min(pr);
        draw_sprite_ext(sprite_index,
        i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)),
        menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),
        1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
    }
    
    ds_priority_destroy(pr);
    
    var text;
    
    switch(item){
        case 0: text = "Enemy" break;
        case 1: text = "Bow" break;
        case 2: text = "Box" break;
        case 3: text = "Sword" break;
        default: text = "" break;
    }
    
    draw_set_halign(fa_center);
    draw_text_colour(view_xview[0]+view_wview[0]/2 , view_yview[0]+view_hview[0]/2 + 64,text, c_white,c_white,c_white,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
