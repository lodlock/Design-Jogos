<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar start_boss;
globalvar lvl2boss;
lvl2boss = false;
start_boss = false;
dialog1 = false;
chicken = false;
kid_can_transform = false;
lvl2bossrdy = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button(mb_left) &amp;&amp; crate &amp;&amp; place_free(mouse_x,mouse_y)){
    instance_create(mouse_x,mouse_y, obj_crate);
    mouse_clear(mb_left);    
}

if(instance_exists(obj_sign_trigger_boss))
    if(obj_sign_trigger_boss.showtext == 1) start_boss = true;

if(instance_exists(obj_pet)){
    if (obj_pet.state == states.transforming){
        if (instance_exists(obj_player))obj_player.image_alpha = 0.2;
        if (instance_exists(obj_box))obj_box.image_alpha = 0.2;
        if (instance_exists(obj_crate))obj_crate.image_alpha = 0.2;
        if (instance_exists(obj_e))obj_e.image_alpha = 0.2;
        if (instance_exists(obj_e2))obj_e2.image_alpha = 0.2;
        if (instance_exists(obj_transformable_enemy))obj_transformable_enemy.image_alpha = 0.2;
        if (instance_exists(obj_pet))obj_pet.image_alpha = 0.2;
        if (instance_exists(obj_sword))obj_sword.image_alpha = 0.2;
        if (instance_exists(obj_torch))obj_torch.image_alpha = 0.2;
        if (instance_exists(obj_lightball_pickup))obj_lightball_pickup.image_alpha = 0.2;
        if (instance_exists(obj_web_pickup))obj_web_pickup.image_alpha = 0.2;
        if (instance_exists(obj_sign))obj_sign.image_alpha = 0.2;
        if (instance_exists(obj_bow))obj_bow.image_alpha = 0.2;
                if (instance_exists(obj_frog_jump))obj_frog_jump.image_alpha = 0.2;
    }
    else {
        if (instance_exists(obj_player))obj_player.image_alpha = 1.0;
        if (instance_exists(obj_box))obj_box.image_alpha = 1.0;
        if (instance_exists(obj_crate))obj_crate.image_alpha = 1.0;
        if (instance_exists(obj_e))obj_e.image_alpha = 1.0;
        if (instance_exists(obj_e2))obj_e2.image_alpha = 1.0;
        if (instance_exists(obj_transformable_enemy))obj_transformable_enemy.image_alpha = 1.0;
        if (instance_exists(obj_pet))obj_pet.image_alpha = 1.0;
        if (instance_exists(obj_sword))obj_sword.image_alpha = 1.0;
        if (instance_exists(obj_torch))obj_torch.image_alpha = 1.0;
        if (instance_exists(obj_sign))obj_sign.image_alpha = 1.0;
        if (instance_exists(obj_lightball_pickup))obj_lightball_pickup.image_alpha = 1.0;
        if (instance_exists(obj_web_pickup))obj_web_pickup.image_alpha = 1.0;
        if (instance_exists(obj_bow))obj_bow.image_alpha = 1.0;
        if (instance_exists(obj_frog_jump))obj_frog_jump.image_alpha = 1.0;
    }
}

if(keyboard_check(ord("L"))){
    keyboard_clear(ord("L"));
    if(global.checkpointR != 0) {
        room_goto(global.checkpointR);
    }
    else {
        room_restart();
    }
}
if(room = room0){
    with(obj_player){
        nearest_torch = instance_nearest(x, y, obj_torch);
        nearest_lightb = instance_nearest(x, y, obj_fireball);
        if(obj_lightning.darkness &amp;&amp; nearest_torch.can_light &amp;&amp; distance_to_object(nearest_torch) &lt; 200 &amp;&amp; hp &lt; 100) hp += 0.5;
        if(obj_lightning.darkness &amp;&amp; distance_to_object(nearest_lightb) &lt; 100 &amp;&amp; hp &lt; 100) hp += 0.6;
        if(obj_lightning.darkness &amp;&amp; !nearest_torch.can_light) hp -= 0.5;
        if(obj_lightning.darkness &amp;&amp; nearest_torch.can_light &amp;&amp; distance_to_object(nearest_torch) &gt; 200) hp -= 0.5;
        if(!obj_lightning.darkness &amp;&amp; obj_lightning.already &amp;&amp; !nearest_torch.can_light &amp;&amp; distance_to_object(nearest_torch) &gt; 0) hp -= 0.5;
        if(!obj_lightning.darkness &amp;&amp; obj_lightning.already &amp;&amp; distance_to_object(nearest_torch) &lt; 200 &amp;&amp; hp &lt; 100 &amp;&amp; distance_to_object(obj_pet) &lt; 150) hp +=0.5;
        if(start_boss &amp;&amp; place_meeting(obj_pet.x,obj_pet.y,obj_boss_obscuro)) hp -=1.0;
    }
}

if(room = lvl_2){
    
    if(lvl2boss &amp;&amp; lvl2bossrdy){
        instance_create(2112,3072, obj_snake);
        instance_create(2112,3072, obj_e);
        if(instance_number(obj_snake) &gt; 10 || instance_number(obj_e) &gt; 5)
            lvl2bossrdy = false;
    }
    if(lvl2boss){
        if(instance_number(obj_snake) = 5 &amp;&amp; instance_number(obj_e) = 2)
            {
                instance_create(2656,3264, obj_boss_obscuro_lvl2);
                instance_create(2112,3072, obj_e);
            }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -999;
draw_sprite(spr_healthbar_bg,1,view_xview[0]+46, view_yview[0]+34);
draw_sprite_ext(spr_healthbar_inner,1,view_xview[0]+46, view_yview[0]+34, obj_player.hp/100,1,0,c_white,1);
draw_sprite(spr_healthbar_border,1,view_xview[0]+15, view_yview[0]+15);
if (instance_exists(obj_boss_obscuro)){
    if(obj_boss_obscuro.state = states.transforming &amp;&amp; start_boss) {
        draw_text_color(view_xview[0]+500, view_yview[0]+250, "PRESS E NOW TO GRAB OBSCURO",c_white,c_white,c_white,c_white,1);
        if(keyboard_check(ord("E"))){
            keyboard_clear(ord("E"));
            obj_boss_obscuro.state = states.chase;
            kid_can_transform = true;
            start_boss=false;
            obj_pet.x = obj_boss_obscuro.x;
            obj_pet.y = obj_boss_obscuro.y;
            obj_pet.state = states.chase; //DEVIA SER GRAB MAS PARA TESTE
            obj_player.state = states.normal;
        }
    
    }

    if(kid_can_transform){
        show_debug_message("TRANSFORMA");
        obj_boss_obscuro.can_be_transformed = false;
        draw_text_color(view_xview[0]+500, view_yview[0]+250, "Pet: Go kid you have to be brave now!# Use the power of transformation, you can do it!!# He is too strong for me to do it alone!!",c_white,c_white,c_white,c_white,1);
        draw_text_color(view_xview[0]+500, view_yview[0]+500, "Press E!",c_white,c_white,c_white,c_white,1);
        obj_boss_obscuro.can_be_transformed = false;
        if(keyboard_check(ord("E"))){
            keyboard_clear(ord("E"));
            dialog1 = true;   
        }
    }


    if(dialog1){
        obj_boss_obscuro.can_be_transformed = false;
        kid_can_transform = false;
        draw_text_colour(view_xview[0]+500, view_yview[0]+250, "Kid: But I am afraid!# I do not like to be on the dark!",c_white,c_white,c_white,c_white,1);
        draw_text_color(view_xview[0]+500, view_yview[0]+350, "Pet: Think about something funny, something you like!#Do it!!",c_white,c_white,c_white,c_white,1);
        draw_text_color(view_xview[0]+500, view_yview[0]+450, "Kid: I will be brave! I will face my fear of the dark! I know exactly what to do!!",c_white,c_white,c_white,c_white,1);
        draw_text_color(view_xview[0]+500, view_yview[0]+550, "Press E now to end your fear of the Dark",c_white,c_white,c_white,c_white,1);
        
        if(keyboard_check(ord("E"))){
            keyboard_clear(ord("E"));
            chicken = true;
            with(obj_boss_obscuro) instance_change(obj_chicken,1);
            obj_pet.state = states.normal; 
            obj_player.state = states.normal;
        }
    }
}
if(chicken){
    can_be_transformed = false;
    dialog1 = false;
    view_object[0] = obj_chicken;
    obj_pet.state = states.chase; 
    obj_player.state = states.chase;
    draw_text_color(view_xview[0]+500, view_yview[0]+250, "Pet: Great job Kid!! You did it!!# Now you can transform like me# What lies ahead??",c_white,c_white,c_white,c_white,1);
    draw_text_color(view_xview[0]+500, view_yview[0]+500, "End of level 1. Congratulations!",c_white,c_white,c_white,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
