<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
target = noone;
globalvar transform;
transform = false;
globalvar crate;
crate = false;

globalvar arrows;
arrows = 3;
lenx = 28;
leny = 1;

globalvar swords;
swords = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(ord("D")); //boolean
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1, obj_box)){
    vsp = key_jump * -jumpspeed;
}

if keyboard_check(vk_control) {
    target = collision_circle(mouse_x, mouse_y, 2, obj_enemy, 0, 1);
    if (instance_exists(target) &amp;&amp; mouse_check_button_pressed(mb_left)) {
        
        switch(target.sprite_index){
            case spr_enemy:
                target.sprite_index = spr_bow;
                transform = true;
                mouse_clear(mb_left);
                break;
            case spr_bow:
                target.sprite_index = spr_crate;
                transform = true;
                mouse_clear(mb_left);
                break;
            case spr_crate:
                target.sprite_index = spr_sword;
                transform = true;
                mouse_clear(mb_left);
                break;
            case spr_sword:
                target.sprite_index = spr_enemy;
                transform = false;
                mouse_clear(mb_left);
                break;
            default:
                break;  
           
        }
        if(obj_timeController.slowDown == false){
            obj_timeController.slowDown = true;
        }   
    }
}
if !keyboard_check(vk_control) {
   
    
    if(obj_timeController.slowDown == true){
        obj_timeController.slowDown = false;
    }
    
}

if (mouse_check_button(mb_left) &amp;&amp; arrows &gt; 0 &amp;&amp; !keyboard_check(vk_control) &amp;&amp; sprite_index == spr_player_bow &amp;&amp; !crate){
    arrows -= 1;
    var arrow_id;
    arrow_id = instance_create(x + lengthdir_x(lenx, image_angle) - lengthdir_y(leny, image_angle), y + lengthdir_y(lenx,image_angle)+lengthdir_x(leny, image_angle), obj_arrow);
    arrow_id.direction = image_angle;
    arrow_id.image_angle = arrow_id.direction;
    mouse_clear(mb_left);
}

//Horizontal Collision
if (place_meeting(x+hsp,y, obj_box)){
    while(!place_meeting(x+sign(hsp),y,obj_box)){
        x += (sign(hsp) * global.timeMultiplier);
    }
    hsp = 0;
}

x += (hsp * global.timeMultiplier);

//Vertical Collision
if (place_meeting(x,y+vsp, obj_box)){
    while(!place_meeting(x,y+sign(vsp),obj_box)){
        y += (sign(vsp) * global.timeMultiplier);
    }
    vsp = 0;
}
y += (vsp * global.timeMultiplier);

if ((place_meeting(x,y, obj_enemy)  || place_meeting(x,y, obj_e)) &amp;&amp; sprite_index != spr_player_sword || place_meeting(x,y, obj_e2)){
    room_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.inventory[2,0] == spr_bow){
    crate = false;
    sprite_index = spr_player_bow;
}
if (global.inventory[2,0] == spr_sword){
    crate = false;
    sprite_index = spr_player_sword;
} 
if (global.inventory[2,0] == spr_crate){
    crate = true;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.inventory[1,0] == spr_bow){
    crate = false;
    sprite_index = spr_player_bow;
}
if (global.inventory[1,0] == spr_sword){
    crate = false;
    sprite_index = spr_player_sword;
} 
if (global.inventory[1,0] == spr_crate){
    crate = true;
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.inventory[0,0] == spr_bow){
    crate = false;
    sprite_index = spr_player_bow;
}
if (global.inventory[0,0] == spr_sword){
    crate = false;
    sprite_index = spr_player_sword;
} 
if (global.inventory[0,0] == spr_crate){
    crate = true;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
